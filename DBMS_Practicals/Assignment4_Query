Assignement 4:- 

1. Borrower(Roll no, Name, Date of Issue, Name of Book, Status)
2. Fine(Roll _no, Date, Amt)

mysql> CREATE TABLE StudentNew (Roll_no INT PRIMARY KEY,Name VARCHAR(100) );
Query OK, 0 rows affected (0.16 sec)

mysql> CREATE TABLE Borrower (     Roll_no INT,     Date_of_Issue DATE,     Name_of_Book VARCHAR(255),     Status CHAR(1),     PRIMARY KEY (Roll_no),     FOREIGN KEY (Roll_no) REFERENCES StudentNew(Roll_no) );
Query OK, 0 rows affected (0.15 sec)

mysql> CREATE TABLE Fine ( Roll_no INT, Date DATE, Amt INT, FOREIGN KEY (Roll_no) REFERENCES StudentNew(Roll_no) );
Query OK, 0 rows affected (0.20 sec)

mysql> SELECT * FROM StudentNew;
+---------+---------+
| Roll_no | Name    |
+---------+---------+
|     101 | Alice   |
|     102 | Bob     |
|     103 | Charlie |
+---------+---------+
3 rows in set (0.01 sec)


mysql> INSERT INTO Borrower (Roll_no, Date_of_Issue, Name_of_Book, Status) VALUES
    -> (101, '2025-07-01', 'Database Systems', 'I'),
    -> (102, '2025-06-15', 'Operating Systems', 'I'),
    -> (103, '2025-07-10', 'Data Structures', 'I');
Query OK, 3 rows affected (0.04 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Borrower;
+---------+---------------+-------------------+--------+
| Roll_no | Date_of_Issue | Name_of_Book      | Status |
+---------+---------------+-------------------+--------+
|     101 | 2025-07-01    | Database Systems  | I      |
|     102 | 2025-06-15    | Operating Systems | I      |
|     103 | 2025-07-10    | Data Structures   | I      |
+---------+---------------+-------------------+--------+
3 rows in set (0.00 sec)

mysql> INSERT INTO Fine (Roll_no, Date, Amt) VALUES
    -> (101, '2025-07-20', 50); 
Query OK, 1 row affected (0.04 sec)

mysql> SELECT * FROM Fine;
+---------+------------+------+
| Roll_no | Date       | Amt  |
+---------+------------+------+
|     101 | 2025-07-20 |   50 |
+---------+------------+------+
1 row in set (0.00 sec)






Accept Roll no and Name of Book from user. Check the
number of days (from date of issue).
If days are between 15 to 30 then fine amount will be Rs Sper day.
If no. of days>30, per day fine will be Rs 50 per day and for days less
than 30, Rs. 5 per day.
After submitting the book, status will change from I to R.
If condition offine is true, then details will be stored into fine table.
Also handles the exception by named exception handler or user define
exception handler.

mysql> DELIMITER $$
mysql> 
mysql> CREATE PROCEDURE ReturnBookAndCalculateFine (
    ->     IN in_Roll_no INT,
    ->     IN in_Name_of_Book VARCHAR(255)
    -> )
    -> BEGIN
    ->     DECLARE v_DateOfIssue DATE;
    ->     DECLARE v_Status CHAR(1);
    ->     DECLARE v_Days INT;
    ->     DECLARE v_FineAmt INT DEFAULT 0;
    ->     DECLARE v_Now DATE;
    ->     
    ->     DECLARE EXIT HANDLER FOR SQLEXCEPTION
    ->     BEGIN
    ->         -- Handle any SQL exceptions here
    ->         ROLLBACK;
    ->         SELECT 'Error: Unable to process return and fine calculation.' AS ErrorMessage;
    ->     END;
    -> 
    ->     START TRANSACTION;
    -> 
    ->     -- Get Date of Issue and Status for the given Roll_no and Book
    ->     SELECT Date_of_Issue, Status
    ->     INTO v_DateOfIssue, v_Status
    ->     FROM Borrower
    ->     WHERE Roll_no = in_Roll_no AND Name_of_Book = in_Name_of_Book AND Status = 'I'
    ->     LIMIT 1;
    -> 
    ->     IF v_DateOfIssue IS NULL THEN
    ->         SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No issued book found for this Roll_no and Book or book already returned.';
    ->     END IF;
    -> 
    ->     SET v_Now = CURDATE();
    ->     SET v_Days = DATEDIFF(v_Now, v_DateOfIssue);
    -> 
    ->     -- Calculate fine based on days
    ->     IF v_Days < 15 THEN
    ->         SET v_FineAmt = v_Days * 5;
    ->     ELSEIF v_Days BETWEEN 15 AND 30 THEN
    ->         SET v_FineAmt = v_Days * 10;
    ->     ELSEIF v_Days > 30 THEN
    ->         SET v_FineAmt = v_Days * 50;
    ->     END IF;
    -> 
    ->     -- Update status to Returned
    ->     UPDATE Borrower
    ->     SET Status = 'R'
    ->     WHERE Roll_no = in_Roll_no AND Name_of_Book = in_Name_of_Book AND Status = 'I';
    -> 
    ->     -- Insert fine record if fine applies
    ->     IF v_FineAmt > 0 THEN
    ->         INSERT INTO Fine (Roll_no, Date, Amt)
    ->         VALUES (in_Roll_no, v_Now, v_FineAmt);
    ->     END IF;
    -> 
    ->     COMMIT;
    -> 
    ->     SELECT CONCAT('Book returned successfully. Fine amount: Rs ', v_FineAmt) AS Message;
    -> 
    -> END $$
Query OK, 0 rows affected (0.09 sec)

mysql> 
mysql> DELIMITER ;
mysql> CALL ReturnBookAndCalculateFine(101, 'Database Systems');
+-------------------------------------------------+
| Message                                         |
+-------------------------------------------------+
| Book returned successfully. Fine amount: Rs 280 |
+-------------------------------------------------+
1 row in set (0.04 sec)

Query OK, 3 rows affected (0.04 sec)

mysql> 



-------------------------------------------Area Calculator------------------------------------------
 DELIMITER $$
 CREATE PROCEDURE CalArea(
       IN in_radi float
     )
     BEGIN

     DECLARE v_area FLOAT(5,2);
    
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
     ROLLBACK;
     SELECT 'Error: Error in caluclation area' AS ErrorMsg;
     END;
     
     START TRANSACTION;
     IF in_radi < 5 OR in_radi > 9 THEN
       SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid Radius';
     END IF;
     SET v_area = PI() * in_radi * in_radi;
     INSERT INTO RadiArea(Radius, Area) VALUES (in_radi, v_area);
     
     COMMIT;
    
     SELECT CONCAT('Area is: ', v_area) AS Message;
     END $$
    
    DELIMITER ;
    Query OK, 0 rows affected (0.08 sec)

    mysql> DELIMITER $$
mysql>  CREATE PROCEDURE CalArea(
    ->        IN in_radi float
    ->      )
    ->      BEGIN
    -> 
    ->      DECLARE v_area FLOAT;
    ->     
    ->      DECLARE EXIT HANDLER FOR SQLEXCEPTION
    ->      BEGIN
    ->      ROLLBACK;
    ->      SELECT 'Error: Error in caluclation area' AS ErrorMsg;
    ->      END;
    ->      
    ->      START TRANSACTION;
    ->     
    ->      SET v_area = PI() * in_radi * in_radi;
    ->      INSERT INTO RadiArea(Radius, Area) VALUES (in_radi, v_area);
    ->      
    ->      COMMIT;
    ->     
    ->      SELECT CONCAT('Area is: ', v_area) AS Message;
    ->      END $$
Query OK, 0 rows affected (0.10 sec)

mysql>     
mysql>     DELIMITER ;


mysql> CREATE TABLE RadiArea(Radius float, Area float(5,2));
Query OK, 0 rows affected (0.25 sec)

mysql> CALL CalArea(5);
+------------------+
| Message          |
+------------------+
| Area is: 78.5398 |
+------------------+
1 row in set (0.03 sec)

Query OK, 1 row affected (0.03 sec)

mysql> SELECT * FROM RadiArea;
+--------+-------+
| Radius | Area  |
+--------+-------+
|      5 | 78.54 |
+--------+-------+
1 row in set (0.00 sec)

mysql> 




